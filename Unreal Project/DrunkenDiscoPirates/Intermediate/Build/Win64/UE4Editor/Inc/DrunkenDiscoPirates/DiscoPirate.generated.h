// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

PRAGMA_DISABLE_DEPRECATION_WARNINGS
class AActor;
class UPaperFlipbook;
class UPrimitiveComponent;
struct FHitResult;
#ifdef DRUNKENDISCOPIRATES_DiscoPirate_generated_h
#error "DiscoPirate.generated.h already included, missing '#pragma once' in DiscoPirate.h"
#endif
#define DRUNKENDISCOPIRATES_DiscoPirate_generated_h

#define DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_RPC_WRAPPERS \
 \
	DECLARE_FUNCTION(execAttack) \
	{ \
		P_GET_OBJECT(AActor,Z_Param_attackingPirate); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->Attack(Z_Param_attackingPirate); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execPickUpRum) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=this->PickUpRum(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execSetFlipbooksImplementation) \
	{ \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newIdleFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newWalkingFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newRunningFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newJumpingStartFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newJumpingLoopFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newAttackingFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newDamagedFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newIdleDrinkingFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newRunningDrinkingFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newJumpingStartDrinkingFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newJumpingLoopDrinkingFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newStunnedFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newJumpingAttackingFlipbook); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->SetFlipbooksImplementation(Z_Param_newIdleFlipbook,Z_Param_newWalkingFlipbook,Z_Param_newRunningFlipbook,Z_Param_newJumpingStartFlipbook,Z_Param_newJumpingLoopFlipbook,Z_Param_newAttackingFlipbook,Z_Param_newDamagedFlipbook,Z_Param_newIdleDrinkingFlipbook,Z_Param_newRunningDrinkingFlipbook,Z_Param_newJumpingStartDrinkingFlipbook,Z_Param_newJumpingLoopDrinkingFlipbook,Z_Param_newStunnedFlipbook,Z_Param_newJumpingAttackingFlipbook); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execOnPickupBottleAudioFinished) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->OnPickupBottleAudioFinished(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execOnKlunkAudioFinished) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->OnKlunkAudioFinished(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execOnAnimationFinished) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->OnAnimationFinished(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execOnEndOverlap) \
	{ \
		P_GET_OBJECT(UPrimitiveComponent,Z_Param_OverlappedComponent); \
		P_GET_OBJECT(AActor,Z_Param_OtherActor); \
		P_GET_OBJECT(UPrimitiveComponent,Z_Param_OtherComp); \
		P_GET_PROPERTY(UIntProperty,Z_Param_OtherBodyIndex); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->OnEndOverlap(Z_Param_OverlappedComponent,Z_Param_OtherActor,Z_Param_OtherComp,Z_Param_OtherBodyIndex); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execOnBeginOverlap) \
	{ \
		P_GET_OBJECT(UPrimitiveComponent,Z_Param_OverlappedComponent); \
		P_GET_OBJECT(AActor,Z_Param_OtherActor); \
		P_GET_OBJECT(UPrimitiveComponent,Z_Param_OtherComp); \
		P_GET_PROPERTY(UIntProperty,Z_Param_OtherBodyIndex); \
		P_GET_UBOOL(Z_Param_bFromSweep); \
		P_GET_STRUCT_REF(FHitResult,Z_Param_Out_SweepResult); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->OnBeginOverlap(Z_Param_OverlappedComponent,Z_Param_OtherActor,Z_Param_OtherComp,Z_Param_OtherBodyIndex,Z_Param_bFromSweep,Z_Param_Out_SweepResult); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execInitiateJump) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->InitiateJump(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execInitiateAttack) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->InitiateAttack(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execMoveVertical) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_value); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->MoveVertical(Z_Param_value); \
		P_NATIVE_END; \
	}


#define DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execAttack) \
	{ \
		P_GET_OBJECT(AActor,Z_Param_attackingPirate); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->Attack(Z_Param_attackingPirate); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execPickUpRum) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=this->PickUpRum(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execSetFlipbooksImplementation) \
	{ \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newIdleFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newWalkingFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newRunningFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newJumpingStartFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newJumpingLoopFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newAttackingFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newDamagedFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newIdleDrinkingFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newRunningDrinkingFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newJumpingStartDrinkingFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newJumpingLoopDrinkingFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newStunnedFlipbook); \
		P_GET_OBJECT(UPaperFlipbook,Z_Param_newJumpingAttackingFlipbook); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->SetFlipbooksImplementation(Z_Param_newIdleFlipbook,Z_Param_newWalkingFlipbook,Z_Param_newRunningFlipbook,Z_Param_newJumpingStartFlipbook,Z_Param_newJumpingLoopFlipbook,Z_Param_newAttackingFlipbook,Z_Param_newDamagedFlipbook,Z_Param_newIdleDrinkingFlipbook,Z_Param_newRunningDrinkingFlipbook,Z_Param_newJumpingStartDrinkingFlipbook,Z_Param_newJumpingLoopDrinkingFlipbook,Z_Param_newStunnedFlipbook,Z_Param_newJumpingAttackingFlipbook); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execOnPickupBottleAudioFinished) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->OnPickupBottleAudioFinished(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execOnKlunkAudioFinished) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->OnKlunkAudioFinished(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execOnAnimationFinished) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->OnAnimationFinished(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execOnEndOverlap) \
	{ \
		P_GET_OBJECT(UPrimitiveComponent,Z_Param_OverlappedComponent); \
		P_GET_OBJECT(AActor,Z_Param_OtherActor); \
		P_GET_OBJECT(UPrimitiveComponent,Z_Param_OtherComp); \
		P_GET_PROPERTY(UIntProperty,Z_Param_OtherBodyIndex); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->OnEndOverlap(Z_Param_OverlappedComponent,Z_Param_OtherActor,Z_Param_OtherComp,Z_Param_OtherBodyIndex); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execOnBeginOverlap) \
	{ \
		P_GET_OBJECT(UPrimitiveComponent,Z_Param_OverlappedComponent); \
		P_GET_OBJECT(AActor,Z_Param_OtherActor); \
		P_GET_OBJECT(UPrimitiveComponent,Z_Param_OtherComp); \
		P_GET_PROPERTY(UIntProperty,Z_Param_OtherBodyIndex); \
		P_GET_UBOOL(Z_Param_bFromSweep); \
		P_GET_STRUCT_REF(FHitResult,Z_Param_Out_SweepResult); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->OnBeginOverlap(Z_Param_OverlappedComponent,Z_Param_OtherActor,Z_Param_OtherComp,Z_Param_OtherBodyIndex,Z_Param_bFromSweep,Z_Param_Out_SweepResult); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execInitiateJump) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->InitiateJump(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execInitiateAttack) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->InitiateAttack(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execMoveVertical) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_value); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->MoveVertical(Z_Param_value); \
		P_NATIVE_END; \
	}


#define DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_EVENT_PARMS \
	struct DiscoPirate_eventDamagedFallback_Parms \
	{ \
		AActor* attackingPirate; \
	}; \
	struct DiscoPirate_eventSetFlipbooks_Parms \
	{ \
		int32 playerIndex; \
	};


extern DRUNKENDISCOPIRATES_API  FName DRUNKENDISCOPIRATES_DamagedFallback;
extern DRUNKENDISCOPIRATES_API  FName DRUNKENDISCOPIRATES_SetFlipbooks;
#define DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_CALLBACK_WRAPPERS
#define DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesADiscoPirate(); \
	friend DRUNKENDISCOPIRATES_API class UClass* Z_Construct_UClass_ADiscoPirate(); \
	public: \
	DECLARE_CLASS(ADiscoPirate, ACharacter, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/DrunkenDiscoPirates"), NO_API) \
	DECLARE_SERIALIZER(ADiscoPirate) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_INCLASS \
	private: \
	static void StaticRegisterNativesADiscoPirate(); \
	friend DRUNKENDISCOPIRATES_API class UClass* Z_Construct_UClass_ADiscoPirate(); \
	public: \
	DECLARE_CLASS(ADiscoPirate, ACharacter, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/DrunkenDiscoPirates"), NO_API) \
	DECLARE_SERIALIZER(ADiscoPirate) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API ADiscoPirate(const FObjectInitializer& ObjectInitializer); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(ADiscoPirate) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, ADiscoPirate); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(ADiscoPirate); \
private: \
	/** Private move- and copy-constructors, should never be used */ \
	NO_API ADiscoPirate(ADiscoPirate&&); \
	NO_API ADiscoPirate(const ADiscoPirate&); \
public:


#define DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_ENHANCED_CONSTRUCTORS \
private: \
	/** Private move- and copy-constructors, should never be used */ \
	NO_API ADiscoPirate(ADiscoPirate&&); \
	NO_API ADiscoPirate(const ADiscoPirate&); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, ADiscoPirate); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(ADiscoPirate); \
	DEFINE_DEFAULT_CONSTRUCTOR_CALL(ADiscoPirate)


#define DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_PRIVATE_PROPERTY_OFFSET \
	FORCEINLINE static uint32 __PPO__flipbook() { return STRUCT_OFFSET(ADiscoPirate, flipbook); } \
	FORCEINLINE static uint32 __PPO__attackBox() { return STRUCT_OFFSET(ADiscoPirate, attackBox); } \
	FORCEINLINE static uint32 __PPO__rumBottleClass() { return STRUCT_OFFSET(ADiscoPirate, rumBottleClass); } \
	FORCEINLINE static uint32 __PPO__levelYBoundary() { return STRUCT_OFFSET(ADiscoPirate, levelYBoundary); } \
	FORCEINLINE static uint32 __PPO__levelZBoundary() { return STRUCT_OFFSET(ADiscoPirate, levelZBoundary); } \
	FORCEINLINE static uint32 __PPO__idleFlipbook() { return STRUCT_OFFSET(ADiscoPirate, idleFlipbook); } \
	FORCEINLINE static uint32 __PPO__walkingFlipbook() { return STRUCT_OFFSET(ADiscoPirate, walkingFlipbook); } \
	FORCEINLINE static uint32 __PPO__runningFlipbook() { return STRUCT_OFFSET(ADiscoPirate, runningFlipbook); } \
	FORCEINLINE static uint32 __PPO__jumpingStartFlipbook() { return STRUCT_OFFSET(ADiscoPirate, jumpingStartFlipbook); } \
	FORCEINLINE static uint32 __PPO__jumpingLoopFlipbook() { return STRUCT_OFFSET(ADiscoPirate, jumpingLoopFlipbook); } \
	FORCEINLINE static uint32 __PPO__attackingFlipbook() { return STRUCT_OFFSET(ADiscoPirate, attackingFlipbook); } \
	FORCEINLINE static uint32 __PPO__damagedFlipbook() { return STRUCT_OFFSET(ADiscoPirate, damagedFlipbook); } \
	FORCEINLINE static uint32 __PPO__idleDrinkingFlipbook() { return STRUCT_OFFSET(ADiscoPirate, idleDrinkingFlipbook); } \
	FORCEINLINE static uint32 __PPO__runningDrinkingFlipbook() { return STRUCT_OFFSET(ADiscoPirate, runningDrinkingFlipbook); } \
	FORCEINLINE static uint32 __PPO__jumpingStartDrinkingFlipbook() { return STRUCT_OFFSET(ADiscoPirate, jumpingStartDrinkingFlipbook); } \
	FORCEINLINE static uint32 __PPO__jumpingLoopDrinkingFlipbook() { return STRUCT_OFFSET(ADiscoPirate, jumpingLoopDrinkingFlipbook); } \
	FORCEINLINE static uint32 __PPO__stunnedFlipbook() { return STRUCT_OFFSET(ADiscoPirate, stunnedFlipbook); } \
	FORCEINLINE static uint32 __PPO__jumpingAttackingFlipbook() { return STRUCT_OFFSET(ADiscoPirate, jumpingAttackingFlipbook); } \
	FORCEINLINE static uint32 __PPO__jumpingSound() { return STRUCT_OFFSET(ADiscoPirate, jumpingSound); } \
	FORCEINLINE static uint32 __PPO__attackingSound() { return STRUCT_OFFSET(ADiscoPirate, attackingSound); } \
	FORCEINLINE static uint32 __PPO__damagedSound() { return STRUCT_OFFSET(ADiscoPirate, damagedSound); } \
	FORCEINLINE static uint32 __PPO__klunkSound() { return STRUCT_OFFSET(ADiscoPirate, klunkSound); } \
	FORCEINLINE static uint32 __PPO__skvalpSound() { return STRUCT_OFFSET(ADiscoPirate, skvalpSound); } \
	FORCEINLINE static uint32 __PPO__pickupBottleSound() { return STRUCT_OFFSET(ADiscoPirate, pickupBottleSound); }


#define DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_25_PROLOG \
	DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_EVENT_PARMS


#define DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_PRIVATE_PROPERTY_OFFSET \
	DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_RPC_WRAPPERS \
	DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_CALLBACK_WRAPPERS \
	DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_INCLASS \
	DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_PRIVATE_PROPERTY_OFFSET \
	DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_RPC_WRAPPERS_NO_PURE_DECLS \
	DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_CALLBACK_WRAPPERS \
	DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_INCLASS_NO_PURE_DECLS \
	DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h_28_ENHANCED_CONSTRUCTORS \
private: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID DrunkenDiscoPirates_Source_DrunkenDiscoPirates_DiscoPirate_h


#define FOREACH_ENUM_STATES(op) \
	op(States::Idle) \
	op(States::Walking) \
	op(States::Running) \
	op(States::JumpingStart) \
	op(States::JumpingLoop) \
	op(States::Attacking) \
	op(States::Damaged) \
	op(States::Stunned) \
	op(States::JumpingAttacking) 
PRAGMA_ENABLE_DEPRECATION_WARNINGS
